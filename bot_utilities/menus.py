# coding=utf-8
"""Send different menus to the wishlist-shop telegram bot chat."""
import os

import django
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update
)
from telegram.ext import ContextTypes

from .history import add_message_to_history, clear_history
from .messages import normalise_markdown_text, send_message
from .states import (
    ACQUAINTED_PRIVACY_POLICY, CONFIRMING_SELF_DELIVERY, DIALOGUE_END,
    MAIN_MENU, SELECTING_DELIVERY_METHOD, SELECTING_IMPRESSION,
    SELECTING_IMPRESSIONS_CATEGORY, SELECTING_LANGUAGE, SELECTING_QUESTION,
    SELECTING_RECEIVING_METHOD, WAITING_CUSTOMER_CONFIRMATION,
    WAITING_RECIPIENT_CONFIRMATION, WRONG_CERTIFICATE_MENU
)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'impressions.settings')
django.setup()

from bot.database import Database  # noqa: E402


async def send_language_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Send Language menu to chat."""
    text = '–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è–∑—ã–∫ / Please select a language'
    keyboard = [[
        InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='russian'),
        InlineKeyboardButton('üá¨üáß English', callback_data='english')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await update.message.reply_text(
        text=text,
        reply_markup=reply_markup
    )
    if message:
        context.chat_data['messages_history'].append(message.message_id)
    return SELECTING_LANGUAGE


async def send_main_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str = ''
) -> int:
    """Send Main menu to chat."""
    if context.chat_data['language'] == 'russian':
        message = '–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å'
        buttons = [
            '–í—ã–±—Ä–∞—Ç—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ',
            '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
            'F.A.Q. –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ]
    else:
        message = 'Please choose what you want to do'
        buttons = [
            'Select Impression',
            'Activate Certificate',
            'F.A.Q. and Support'
        ]

    text = f'{text}{message}'
    keyboard = [
        [InlineKeyboardButton(buttons[0], callback_data='impression')],
        [InlineKeyboardButton(buttons[1], callback_data='certificate')],
        [InlineKeyboardButton(buttons[2], callback_data='faq')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_message(update, context, text, reply_markup=reply_markup)
    return MAIN_MENU


async def send_impressions_categories_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str = ''
) -> int:
    """Send Impressions Categories menu."""
    if context.chat_data['language'] == 'russian':
        text = (
            text +
            '–î–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –º—ã —Ä–∞–∑–¥–µ–ª–∏–ª–∏ –ø–æ–¥–∞—Ä–∫–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º '
            '–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:'
            '\n\n'
        )
        buttons = [
            '–î–ª—è –º—É–∂—á–∏–Ω',
            '–î–ª—è –¥–µ–≤—É—à–µ–∫',
            '–î–ª—è –ø–∞—Ä',
            '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ',
            '¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        ]
    else:
        text = (
            text +
            "For your convenience, we have divided gifts into several "
            "categories:"
            "\n\n"
        )
        buttons = [
            'For Men',
            'For Girls',
            'For Couples',
            'View All',
            '¬´ Back to main menu'
        ]

    keyboard = []
    callbacks = ['man', 'girl', 'couple', 'all', 'main_menu']
    for button, callback in zip(buttons, callbacks):
        keyboard.append([InlineKeyboardButton(button, callback_data=callback)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message(update, context, text, reply_markup=reply_markup)
    return SELECTING_IMPRESSIONS_CATEGORY


async def send_impressions_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str = ''
) -> int:
    """Send Impressions menu."""
    if update.callback_query:
        impressions_category = update.callback_query.data
        context.chat_data['impressions_category'] = impressions_category

    impressions = await Database.get_impressions(
        context.chat_data['language'],
        context.chat_data['impressions_category']
    )
    if not impressions:
        if context.chat_data['language'] == 'russian':
            text = '–ò–∑–≤–∏–Ω–∏, –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.\n'
        else:
            text = 'Sorry, no impressions yet.\n'
        next_state = await send_main_menu(update, context, text)
        return next_state

    if context.chat_data['impressions_category'] == 'man':
        russian_title = '–≠—Ç–æ –ª—É—á—à–∏–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –º—É–∂—á–∏–Ω –Ω–∞ –ë–∞–ª–∏üî•'
        english_title = 'These are the best gifts for men in Baliüî•'
    elif context.chat_data['impressions_category'] == 'girl':
        russian_title = '–≠—Ç–æ –ª—É—á—à–∏–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –¥–µ–≤—É—à–µ–∫ –Ω–∞ –ë–∞–ª–∏ üòç'
        english_title = 'These are the best gifts for girls in Bali üòç'
    elif context.chat_data['impressions_category'] == 'couple':
        russian_title = '–≠—Ç–∏ –ø–æ–¥–∞—Ä–∫–∏ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø–∞—Ä ‚ô•'
        english_title = 'These are perfect gifts for couples ‚ô•'
    else:
        russian_title = ''
        english_title = ''

    if context.chat_data['language'] == 'russian':
        if russian_title:
            text += '*' + russian_title + '*\n\n'

        text += (
            '–ù–∞–∂–∏–º–∞–π –Ω–∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ –Ω—ë–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n'
            '–ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—à—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ, –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –µ–≥–æ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã '
            '–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ.'
            '\n\n'
        )
        button = '‚Äπ  –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
    else:
        if english_title:
            text += '*' + english_title + '*\n\n'

        text += (
            "Click on an impression to read more about it.\n"
            "When you choose the right one, send the bot its number "
            "to proceed to purchase."
            "\n\n"
        )
        button = '‚Äπ  Back to category selection'

    text = normalise_markdown_text(text)
    context.chat_data['impressions_ids'] = []
    for impression_number, impression in enumerate(impressions, 1):
        impression_title = normalise_markdown_text(
            f"{impression_number}. {impression['name']} - "
            f"{impression['price']}"
        )
        text += f"[{impression_title}]({impression['url']})\n"
        context.chat_data['impressions_ids'].append(impression['id'])

    keyboard = [[InlineKeyboardButton(button, callback_data='category_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    parse_mode = 'MarkdownV2'

    await send_message(
        update, context, text, reply_markup=reply_markup, parse_mode=parse_mode
    )
    return SELECTING_IMPRESSION


async def send_receiving_methods_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str = ''
) -> int:
    """Send to chat Menu of ways to receive order."""
    impression = await Database.get_impression(
        context.chat_data['impression_id'],
        context.chat_data['language']
    )
    impression_title = f"{impression['name']} - {impression['price']}"
    if context.chat_data['language'] == 'russian':
        text = normalise_markdown_text(
            f'{text}–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢—ã –≤—ã–±—Ä–∞–ª(–∞) ' +
            '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:\n*' +
            impression_title +
            '*\n\n–í –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ?'
        )
        buttons = [
            'üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –∫–æ—Ä–æ–±–∫–µ',
            'üíå –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
            '‚Äπ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ',
            '¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        ]
    else:
        text = normalise_markdown_text(
            f'{text}Great choice! You chose ' +
            'the certificate:\n*' +
            impression_title +
            '*\n\nIn what form do you want to receive it?'
        )
        buttons = [
            'üéÅ Certificate in a box',
            'üíå Electronic certificate',
            '‚Äπ Choose a different impression',
            '¬´ Back to main menu'
        ]

    keyboard = [
        [InlineKeyboardButton(buttons[0], callback_data='gift_box')],
        [InlineKeyboardButton(buttons[1], callback_data='email')],
        [InlineKeyboardButton(buttons[2], callback_data='impression')],
        [InlineKeyboardButton(buttons[3], callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    parse_mode = 'MarkdownV2'

    await send_message(
        update, context, text, reply_markup=reply_markup, parse_mode=parse_mode
    )
    return SELECTING_RECEIVING_METHOD


async def send_privacy_policy_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Send Privacy Policy link and button to chat."""
    policy_url = await Database.get_policy_url(context.chat_data['language'])
    if context.chat_data['language'] == 'russian':
        text = (
            '–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª–∏ üëå\n\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å [–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ '
            f'–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö üìá]({policy_url})'
        )
        button = '–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω(–∞)'
    else:
        text = (
            'Thank you, we wrote it down üëå\n\n'
            'Please read the *[Privacy Policy and the provisions '
            f'on the processing of personal data üìá]({policy_url})*'
        )
        button = 'Acquainted'

    keyboard = [[InlineKeyboardButton(button, callback_data='privacy_policy')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    parse_mode = 'MarkdownV2'

    await send_message(
        update, context, text, reply_markup=reply_markup, parse_mode=parse_mode
    )
    return ACQUAINTED_PRIVACY_POLICY


async def send_customer_confirmation_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str = ''
) -> int:
    """Send confirmation menu of customer fullname and phonenumber."""
    if context.chat_data['language'] == 'russian':
        text = (
            text +
            "–¢—ã –≤–≤–µ–ª(–∞):\n"
            f"{context.chat_data['customer_fullname']}\n"
            f"{context.chat_data['customer_phone']}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )
        buttons = ["–î–∞, –≤–µ—Ä–Ω–æ", "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"]
    else:
        text = (
            text +
            "Here's what you entered:\n"
            f"{context.chat_data['customer_fullname']}\n"
            f"{context.chat_data['customer_phone']}\n\n"
            "Is that right?"
        )
        buttons = ["Yes, that's right", 'Correct the data']

    keyboard = [
        [InlineKeyboardButton(buttons[0], callback_data='right_customer')],
        [InlineKeyboardButton(buttons[1], callback_data='wrong_customer')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await update.message.reply_text(
        text=text,
        reply_markup=reply_markup
    )
    add_message_to_history(context, message)
    return WAITING_CUSTOMER_CONFIRMATION


async def send_screenshot_receiving_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> int:
    """Send the menu to get a screenshot."""
    if context.chat_data['language'] == 'russian':
        text = (
            '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–º '
            '–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –Ω–∞–ø–∏—à–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä üéÜ'
        )
        button = '–°–ø–∞—Å–∏–±–æ üëå, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    else:
        text = (
            'Thank you for your purchase! We will check everything '
            'and an operator will write to you shortly üéÜ'
        )
        button = 'Thanks üëå, back to the main menu'

    keyboard = [[InlineKeyboardButton(button, callback_data='main_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await update.message.reply_text(
        text=text,
        reply_markup=reply_markup
    )
    add_message_to_history(context, message)
    return DIALOGUE_END


async def send_delivery_methods_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str = ''
) -> int:
    """Send Delivery methods menu."""
    if context.chat_data['language'] == 'russian':
        text = (
            f'{text}–°–ø–∞—Å–∏–±–æ!\n'
            '–ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n\n'
            '–ü—É–Ω–∫—Ç —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ë—É–∫–∏—Ç–µ\n\n'
            '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–π–æ–Ω–∞'
        )
        buttons = ['–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º', '–°–∞–º–æ–≤—ã–≤–æ–∑']
    else:
        text = (
            f'{text}Thank you!\n'
            'Tell me how you can get the certificate\n\n'
            'The self-delivery point is on Bukit.\n\n'
            'Delivery cost depends on the neighbourhood'
        )
        buttons = ['Courier delivery', 'Self-delivery']

    keyboard = [
        [
            InlineKeyboardButton(buttons[0], callback_data='courier_delivery'),
            InlineKeyboardButton(buttons[1], callback_data='self_delivery'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await clear_history(update, context)
    message = await context.bot.send_message(
        chat_id=update.effective_chat['id'],
        text=text,
        reply_markup=reply_markup
    )
    add_message_to_history(context, message)
    return SELECTING_DELIVERY_METHOD


async def send_recipient_confirmation_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str = ''
) -> int:
    """Send confirmation menu of recipient name and contact."""
    if context.chat_data['language'] == 'russian':
        text = (
            text +
            "–¢—ã –≤–≤–µ–ª(–∞):\n"
            f"{context.chat_data['recipient_name']}\n"
            f"{context.chat_data['recipient_contact']}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )
        buttons = ["–î–∞, –≤–µ—Ä–Ω–æ", "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"]
    else:
        text = (
            text +
            "Here's what you entered:\n"
            f"{context.chat_data['recipient_name']}\n"
            f"{context.chat_data['recipient_contact']}\n\n"
            "Is that right?"
        )
        buttons = ["Yes, that's right", 'Correct the data']

    keyboard = [
        [InlineKeyboardButton(buttons[0], callback_data='right_recipient')],
        [InlineKeyboardButton(buttons[1], callback_data='wrong_recipient')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await update.message.reply_text(
        text=text,
        reply_markup=reply_markup
    )
    add_message_to_history(context, message)
    return WAITING_RECIPIENT_CONFIRMATION


async def send_successful_booking_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Send to chat Message about successful booking."""
    if context.chat_data['delivery_method'] == 'courier_delivery':
        recipient_name = context.chat_data['recipient_name']
        recipient_contact = context.chat_data['recipient_contact']
    else:
        recipient_name = context.chat_data['customer_fullname']
        recipient_contact = '–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–º —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫–∞–∑—á–∏–∫'

    await Database.create_order(
        chat_id=update.effective_chat['id'],
        tg_username=update.effective_chat['username'],
        language=context.chat_data['language'],
        customer_email='',
        customer_fullname=context.chat_data['customer_fullname'],
        customer_phone=context.chat_data['customer_phone'],
        impression_id=context.chat_data['impression_id'],
        recipient_name=recipient_name,
        recipient_contact=recipient_contact,
        email_receiving=False,
        delivery_method=context.chat_data['delivery_method']
    )

    if context.chat_data['language'] == 'russian':
        text = (
            '–ú—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚ú®\n\n'
            '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –Ω–∞–ø–∏—à–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä'
        )
        button = '–°–ø–∞—Å–∏–±–æ üëå, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    else:
        text = (
            "We've booked the certificate ‚ú®\n\n"
            "An operator will write to you shortly"
        )
        button = 'Thanks üëå, back to the main menu'

    keyboard = [[InlineKeyboardButton(button, callback_data='main_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = await update.callback_query.edit_message_text(
        text=text,
        reply_markup=reply_markup
    )
    add_message_to_history(context, message)
    return DIALOGUE_END


async def send_self_delivery_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str = ''
) -> int:
    """Handle Self-delivery button click."""
    self_delivery_point = await Database.get_self_delivery_point(
        context.chat_data['language']
    )
    if context.chat_data['language'] == 'russian':
        text = (
            f'{text}–°–∞–º–æ–≤—ã–≤–æ–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:\n' +
            self_delivery_point['address'] +
            '\n\n–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:\n' +
            self_delivery_point['opening_hours']
        )
        buttons = ['–ú–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç', '‚Äπ –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏']
    else:
        text = (
            f'{text}Self-collection is available at the address:\n' +
            self_delivery_point['address'] +
            '\n\nOpening hours:\n' +
            self_delivery_point['opening_hours']
        )
        buttons = ['It works for me', '‚Äπ Back to delivery methods']

    keyboard = [[
        InlineKeyboardButton(buttons[0], callback_data='self_delivery_yes'),
        InlineKeyboardButton(buttons[1], callback_data='self_delivery_no'),
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=reply_markup
        )
        return CONFIRMING_SELF_DELIVERY

    await update.message.reply_text(
        text=text,
        reply_markup=reply_markup
    )
    return CONFIRMING_SELF_DELIVERY


async def send_good_certificate_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    impression_name: str
) -> int:
    """Send to chat menu for case of correct certificate ID."""
    if context.chat_data['language'] == 'russian':
        text = normalise_markdown_text(
            '–¢–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —ç—Ç–æ -\n'
            f'*{impression_name}*\n'
            '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä!\n\n'
            '–í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä\n'
            '–∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –≤—Å–µ –¥–µ—Ç–∞–ª–∏.\n'
            '–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á ‚úã'
        )
        button = '–°–ø–∞—Å–∏–±–æ üëå, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    else:
        text = normalise_markdown_text(
            'Your impression is\n'
            f'*{impression_name}*\n'
            'Excellent choice!\n\n'
            'An operator will contact you within an hour\n'
            'with all the details.\n'
            'See you soon ‚úã'
        )
        button = 'Thanks üëå, back to the main menu'

    keyboard = [[InlineKeyboardButton(button, callback_data='main_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = await update.message.reply_text(
        text=text,
        parse_mode='MarkdownV2',
        reply_markup=reply_markup
    )
    add_message_to_history(context, message)
    return DIALOGUE_END


async def send_wrong_certificate_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str = ''
) -> int:
    """Send to chat menu for case of incorrect certificate ID."""
    if context.chat_data['language'] == 'russian':
        text_beginning = text if text else '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n'
        text = (
            f'{text_beginning}–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –≤–≤–µ–ª(–∞) '
            'ID –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n\n'
            '–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∑–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞"'
        )
        buttons = [
            '–í–≤–µ—Å—Ç–∏ ID —Å–Ω–æ–≤–∞',
            '–ü–æ–∑–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞',
            '–°–ø–∞—Å–∏–±–æ üëå, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        ]
    else:
        text_beginning = text if text else 'Something went wrong\n'
        text = (
            f'{text_beginning}Please check if you have entered the ID '
            'correctly and if the certificate expiry date is valid\n\n'
            'If you need help, click the "Call Person" button'
        )
        buttons = [
            'Enter ID again',
            'Call Person',
            'Thanks üëå, back to the main menu'
        ]

    keyboard = [
        [
            InlineKeyboardButton(buttons[0], callback_data='certificate_id'),
            InlineKeyboardButton(buttons[1], callback_data='call_person')
        ],
        [
            InlineKeyboardButton(buttons[2], callback_data='main_menu'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # if update.callback_query:
    #     await update.callback_query.edit_message_text(
    #         text=text,
    #         reply_markup=reply_markup
    #     )
    #     return WRONG_CERTIFICATE_MENU

    message = await update.message.reply_text(
        text=text,
        reply_markup=reply_markup
    )
    add_message_to_history(context, message)
    return WRONG_CERTIFICATE_MENU


async def send_calling_person_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Send a chat message when calling a person."""
    await Database.create_support_application(
        chat_id=update.effective_chat['id'],
        tg_username=update.effective_chat['username'],
        language=context.chat_data['language'],
        request_type=context.chat_data['request_type']
    )

    if context.chat_data['language'] == 'russian':
        text = '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
        button = '–°–ø–∞—Å–∏–±–æ üëå, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    else:
        text = 'Thank you for contacting us, support will respond shortly'
        button = 'Thanks üëå, back to the main menu'

    keyboard = [[InlineKeyboardButton(button, callback_data='main_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # if update.callback_query:
    message = await update.callback_query.edit_message_text(
        text,
        reply_markup=reply_markup
    )
    add_message_to_history(context, message)
    return DIALOGUE_END

    # await update.message.reply_text(text=text)
    # return DIALOGUE_END


async def send_faq_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str = ''
) -> int:
    """Handle the FAQ button click."""
    faq_details = await Database.get_faq_details(
        context.chat_data['language']
    )
    if context.chat_data['language'] == 'russian':
        if faq_details:
            text += '–ù–∞–∂–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ.\n\n'
        else:
            text += '–ò–∑–≤–∏–Ω–∏, FAQ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.\n\n'
        buttons = ['–ü–æ–∑–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞', '¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    else:
        if faq_details:
            text += 'Click on a question to read the answer to it.\n\n'
        else:
            text += 'Sorry, the FAQ is empty for now.\n\n'
        buttons = ['Call Person', '¬´ Back to main menu']

    text = normalise_markdown_text(text)
    for question_number, faq_detail in enumerate(faq_details, 1):
        faq_question = normalise_markdown_text(
            f"{question_number}. {faq_detail['question']}"
        )
        text += f"[{faq_question}]({faq_detail['url']})\n"

    keyboard = [
        [InlineKeyboardButton(buttons[0], callback_data='call_person')],
        [InlineKeyboardButton(buttons[1], callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    parse_mode = 'MarkdownV2'

    await send_message(
        update, context, text, reply_markup=reply_markup, parse_mode=parse_mode
    )
    return SELECTING_QUESTION
